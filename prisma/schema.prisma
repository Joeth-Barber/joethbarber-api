generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum BarberRole {
  ADMIN
  EMPLOYEE
}

enum WorkScheduleStatus {
  ACTIVE
  DISABLED
}

enum ClientRole {
  CLIENT
  MENSALIST
}

enum BookingStatus {
  PENDING
  COMPLETED
  CANCELED
}

enum PaymentStatus {
  COMPLETED
  PENDING
}

model Barber {
  id        String     @id @default(uuid())
  fullName  String
  email     String     @unique
  password  String
  role      BarberRole @default(ADMIN)
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime?  @updatedAt @map("updated_at")

  workSchedules WorkSchedule[] @relation("BarberToWorkSchedules")
}

model WorkSchedule {
  id                 String             @id @default(uuid())
  barber             Barber             @relation("BarberToWorkSchedules", fields: [barberId], references: [id])
  barberId           String
  workDays           WorkDay[]          @relation("ScheduleToWorkDays")
  status             WorkScheduleStatus @default(DISABLED)
  allowClientsToView Boolean            @default(false)
  createdAt          DateTime           @default(now()) @map("created_at")
  activatedAt        DateTime?          @map("activated_at")
  updatedAt          DateTime?          @updatedAt @map("updated_at")
}

model WorkDay {
  id             String       @id @default(uuid())
  workSchedule   WorkSchedule @relation("ScheduleToWorkDays", fields: [workScheduleId], references: [id], onDelete: Cascade)
  workScheduleId String
  dayOfWeek      Int
  date           String
  startTime      String
  endTime        String
  breaks         Break[]      @relation("WorkDayToBreaks")
  availableHours String[]
}

model Break {
  id        String  @id @default(uuid())
  workDay   WorkDay @relation("WorkDayToBreaks", fields: [workDayId], references: [id], onDelete: Cascade)
  workDayId String
  title     String
  startTime String
  endTime   String
}

model Client {
  id         String     @id @default(uuid())
  role       ClientRole @default(CLIENT)
  fullName   String
  nickName   String
  phone      String     @unique
  cpf        String     @unique
  email      String     @unique
  billingDay Int
  createdAt  DateTime   @default(now()) @map("created_at")
  updatedAt  DateTime?  @updatedAt @map("updated_at")

  payments Payment[] @relation("ClientPayments")
  bookings Booking[] @relation("ClientBookings")
}

model Booking {
  id             String        @id @default(uuid())
  client         Client        @relation("ClientBookings", fields: [clientId], references: [id])
  clientId       String
  workScheduleId String
  date           DateTime
  totalPrice     Float
  description    String
  services       Service[]     @relation("BookingServices")
  products       Product[]     @relation("BookingProducts")
  status         BookingStatus @default(PENDING)
  createdAt      DateTime      @default(now()) @map("created_at")
  updatedAt      DateTime?     @updatedAt @map("updated_at")

  payments Payment[] @relation("PaymentBookings")
}

model Payment {
  id          String        @id @default(uuid())
  client      Client        @relation("ClientPayments", fields: [clientId], references: [id])
  clientId    String
  amount      Float
  status      PaymentStatus @default(PENDING)
  bookings    Booking[]     @relation("PaymentBookings")
  products    Product[]     @relation("PaymentProducts")
  paymentDate DateTime?
  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime?     @updatedAt @map("updated_at")
}

model Service {
  id        String    @id @default(uuid())
  name      String
  price     Float
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  bookings Booking[] @relation("BookingServices")
}

model Product {
  id        String    @id @default(uuid())
  name      String
  price     Float
  quantity  Int
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  bookings Booking[] @relation("BookingProducts")
  payments Payment[] @relation("PaymentProducts")
}
